lua_shared_dict _upstream_G 10M;
lua_shared_dict limit_conn_store 100M;
init_by_lua_block {
    require "resty.core"
}

server {
    listen          80;
    default_type    'text/plain';
    error_log       logs/error.log warn;
    access_log      logs/access.log main;
    # 出于调试目的，禁止缓存
    lua_code_cache off;
    #手动切换 /upstream_switch?ups=<backend name>
    location = /upstream_switch {
        #这里注意要加上IP限制
        #allow 127.0.0.1
        content_by_lua_block {
            local ups = ngx.req.get_uri_args()["ups"]
            if ups == nil then
                ngx.say("usage: /upstream_switch?ups=x.x.x.x")
                return
            end
            local host = ngx.var.http_host
            local ups_from = ngx.shared._upstream_G:get(host)
            if ups_from == nil then
                ups_from = "backend_default"
            end
            ngx.log(ngx.ERR, host, " switch upstream from ", ups_from, " to ", ups)
            ngx.shared._upstream_G:set(host, ups)
        }
    }
    location / {
        set_by_lua_block $cur_ups {
            local host = ngx.var.http_host
            local ups = ngx.shared._upstream_G:get(host)
            if ups ~= nil then
                ngx.log(ngx.ERR, "get [", ups, "] from ngx.shared._upstream_G")
                return ups
            end
            ngx.shared._upstream_G:set(host, "backend_default")
            ngx.log(ngx.ERR, "use default upstream: backend1")
            return "backend_default"
        }
        proxy_pass http://$cur_ups;
    }

    location /auto {
        # 这里演示自动切换到备用负载的方法
        set_by_lua_file $ups lib/auto_switch.lua;
        proxy_pass http://$ups;
    }
}